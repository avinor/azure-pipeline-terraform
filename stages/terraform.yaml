# Plan and apply terraform resources
# Currently uses terragrunt for deployment, will probably change later
#
# 
#
# Azure Hosted Agent did not have terraform 0.12 at the time of creation and therefore
# installing terraform 0.12
#
# Nb. Due to a bug it could not use the install terragrunt and terraform step templates
#     and had to include those in deployment steps directly. Maybe will be fixed later

parameters:
  azureSubscription: ''
  environment: ''
  paths: []
  sasToken: ''
  terragruntVersion: 'v0.18.4'
  terraformVersion: '0.12.0'

stages:
- stage: Plan
  jobs:
  - ${{ each path in parameters.paths }}:
    - job: ${{ path.name }}
      displayName: ${{ path.displayName }}
      pool:
        vmImage: 'ubuntu-16.04'
      steps:
      - checkout: self
        clean: false
        fetchDepth: 5
        lfs: true
        path: ${{ path.name }}
      - template: ../steps/terraform-install.yaml
        parameters:
          terraformVersion: ${{ parameters.terraformVersion }}
      - template: ../steps/terragrunt-install.yaml
        parameters:
          terragruntVersion: ${{ parameters.terragruntVersion }}
      - task: AzureCLI@1
        displayName: 'Run Terragrunt Plan'
        inputs:
          azureSubscription: ${{ parameters.azureSubscription }}
          scriptLocation: inlineScript
          inlineScript: |
            export ARM_CLIENT_ID=$servicePrincipalId
            export ARM_CLIENT_SECRET=$servicePrincipalKey
            export ARM_TENANT_ID=$(az account show | jq -r .tenantId)
            
            cd $(Agent.BuildDirectory)/${{ path.name }}/${{ path.path }}
            terragrunt plan-all -input=false
          addSpnToEnvironment: true
          useGlobalConfig: true
        env:
          ARM_SAS_TOKEN: $(sasToken)
- stage: Apply
  jobs:
  - ${{ each path in parameters.paths }}:
    - deployment: ${{ path.name }}
      displayName: ${{ path.displayName }}
      pool:
        vmImage: 'ubuntu-16.04'
      environment: ${{ parameters.environment }}
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
      strategy:
        runOnce:
          deploy:
            steps:
            - checkout: self
              clean: false
              fetchDepth: 5
              lfs: true
              path: ${{ path.name }}
            # Should be like this... but just fails.
            # - template: ../steps/terraform-install.yaml
            # - template: ../steps/terragrunt-install.yaml
            - script: |
                curl -LO "https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip"
                sudo unzip -o "terraform_${TERRAFORM_VERSION}_linux_amd64.zip" -d /usr/local/bin
                rm -f "terraform_${TERRAFORM_VERSION}_linux_amd64.zip"
              env:
                TERRAFORM_VERSION: ${{ parameters.terraformVersion }}
              displayName: Install terraform
            - script: |
                curl -L https://github.com/gruntwork-io/terragrunt/releases/download/${TERRAGRUNT_VERSION}/terragrunt_linux_amd64 --output terragrunt
                chmod +x terragrunt
                sudo mv terragrunt /usr/local/bin
              env:
                TERRAGRUNT_VERSION: ${{ parameters.terragruntVersion }}
              displayName: Install terragrunt
            - task: AzureCLI@1
              displayName: 'Run Terragrunt Apply'
              inputs:
                azureSubscription: ${{ parameters.azureSubscription }}
                scriptLocation: inlineScript
                inlineScript: |
                  export ARM_CLIENT_ID=$servicePrincipalId
                  export ARM_CLIENT_SECRET=$servicePrincipalKey
                  export ARM_TENANT_ID=$(az account show | jq -r .tenantId)
                  
                  cd $(Agent.BuildDirectory)/${{ path.name }}/${{ path.path }}
                  terragrunt apply-all -input=false --terragrunt-non-interactive
                addSpnToEnvironment: true
                useGlobalConfig: true
